#!/bin/sh
. /etc/functions.sh
include /lib/network/

# script revision: $Revision$

URL="http://wurststulle.dyndns.org/ffmap/build/index.php"
DEBUG=0

#######
# JSON helper
# These functions are filling up the variable DATA if not called with the arguments -v <Variable name>.
app(){
  eval "$1=\"\$$1$2\""
}

rem_trailing_comma(){
	DATA=$( echo $DATA | sed s/.$// )
}

json_helper(){
	do="$1"
	shift
	
  if [ "$1" = "-v" ]
  then
  	var=$2
  	shift;shift
  else
    var="DATA"
  fi

		case $do in
      "obj")		[ -n "$1" ] && app $var "\\\"$1\\\":"
								app $var "{"
      					;;
			"endobj")	rem_trailing_comma
								app $var "},"
								;;
			"array")	
								[ -n "$1" ] && app $var "\\\"$1\\\":"
								app $var "["
								;;
			"endarr")	rem_trailing_comma
								app $var "],"
      					;;
      "attr")		
      					app $var "\\\"$1\\\":\\\"$2\\\","
      					;;
    esac
}

for s in obj endobj array endarr attr
do
	eval "alias $s=\"json_helper $s\""
done

#
#######


config_get_batch(){
	for s in $*
	do
		eval "config_get $s \"$1\" $s"
	done
}

make_dev_list(){
	DEVICES="$DEVICES $1"
}


wifi_default_config(){
	cat <<EOF >> /etc/config/freifunk_map

config rf-iface $config
	option	'antDirection'	'0'
	option	'antGain'	'2'
	option	'antBeamH'	'360'
	option	'antBeamV'	'90'
	option	'antPol'	'V'
	option	'antTilt'	'0'
	option	'ignore'	'0'

EOF
}

wired_default_config(){
	local config=$1
	
	cat <<EOF >> /etc/config/freifunk_map

config wired-iface $config
	option	'ignore'	'0'

EOF
	[ "$config" = "loopback" ] && uci set freifunk_map.$config.ignore=1
}

interface_addresses(){
	[ "$DEBUG" = "1" ] &&	echo "entered interface_addresses() $1"
	ip_params(){		
		local config=$1
		config_get_batch "$config" ipaddr ip6addr
		[ -n "$ipaddr" ] && attr ipv4Addr $ipaddr
		[ -n "$ip6addr" ] && attr ipv6Addr $ip6Addr
	}

	local config=$1
	config_get_batch "$config" ifname type aliases
	macaddr=$( ip addr show dev $ifname | grep -e '.*:.*:.*:.*:.*:.*' | cut -d" " -f 6 )
	attr macAddr $macaddr
	ip_params $config
	[ "$type" = "bridge" ] && attr bridgeName "$ifname"

	[ -n "$aliases" ] && {
		array ipAlias
			for a in $aliases
			do
				obj
					config_get ifname "$a" ifname
					attr name $ifname
					ip_params $a
				endobj
			done
		endarr
	}
}


wifi_device_attributes(){
	[ "$DEBUG" = "1" ] &&	echo "entered wifi_device_attributes() $1"
	
	wifi_iface_attributes(){
		[ "$DEBUG" = "1" ] &&echo "entered wifi_iface_attributes() $1"
		local config="$1"
	
		config_get device "$config" device
		if [ "$device" = "$2" ]
		then
			config_get_batch "$config" ssid bssid mode ifname
			obj
				[ -n "$ssid" ] && attr essid $ssid
				[ -n "$bssid" ] && attr bssid $bssid
				[ -n "$mode" ] && attr wlMode $mode
				config_get network "$config" network
				config_get ifname "$config" ifname
				attr name $ifname
				wlmac=$( ip addr show dev $ifname | grep -e '.*:.*:.*:.*:.*:.*' | cut -d" " -f 6 )
				attr wlMacAddr $wlmac
				interface_addresses $network
				config_get type "$network" type
				[ "$type" != "bridge" ] && WIRELESS_NETWORKS="$WIRELESS_NETWORKS $network"
			endobj
		fi
	} 

	local config="$1"
	
	[ -z "$(uci get freifunk_map.$config.ignore 2>/dev/null )" ] && wifi_default_config	$config
	
	ignore=$(uci get freifunk_map.$config.ignore)
	
	if [ "$ignore" != "1" ]
	then
		config_get_batch "$config" type channel hwmode txpower macaddr antDirection antGain antBeamH antBeamV antPol antTilt macaddr
		obj
			attr name $config
			
			for s in antDirection antGain antBeamH antBeamV antPol antTilt channel txpower
			do
				eval "var_cont=\$$s"
				[ -n "$var_cont" ] && attr $s $var_cont
			done
			[ -n "$hwmode" ] && attr wirelessStandard "802.$hwmode"
			
			array wlIface
				config_foreach wifi_iface_attributes wifi-iface $config
			endarr
		endobj
	fi
}

network_interfaces(){
	[ "$DEBUG" = "1" ] &&	echo "entered network_interfaces()"
	
	network_iface(){
		[ "$DEBUG" = "1" ] &&	echo "entered network_iface() $1"
		local config=$1
		local isbridge=0
		local iswireless=0
		
		for net in $WIRELESS_NETWORKS
		do
			[ "$net" = "$config" ] && iswireless=1
		done
		
		if [ "$iswireless" != "1" ]
		then
			[ -z "$(uci get freifunk_map.$config.ignore 2>/dev/null )" ] && wired_default_config $config
	
			ignore=$(uci get freifunk_map.$config.ignore)
		
			if [ "$ignore" != "1" ]
			then
				obj
					config_get ifname "$config" ifname
					attr name $ifname
					interface_addresses $config
				endobj
			fi
		fi
	}
	

	config_load network
	scan_interfaces

	array wlDevice
		config_load wireless
		config_foreach make_dev_list wifi-device
		for wd in $DEVICES
		do
			wifi_device_attributes $wd
		done
	endarr

	array wiredIface
		config_load network
		DEVICES=""
		config_foreach make_dev_list interface
		for int in $DEVICES
		do
			network_iface $int
		done
	endarr
}


rp_links(){

	olsr_links(){
		[ "$DEBUG" = "1" ] &&	echo "entered olsr_links()"
		olsr_config=$1
		obj olsr
			attr metric $( grep LinkQualityAlgorithm $olsr_config | cut -d" " -f2 | sed 's/"//g' ) 
			ipversion=$( grep IpVersion $olsr_config | cut -d" " -f2 )
			attr ipv $ipversion 
	    
			case "$ipversion" in
				"4" ) exec<<EOM
		    $( wget -T30 -q -O- http://127.0.0.1:2006/links | grep -e ^[1-9] )
EOM
						;;
				"6" ) exec<<EOM
	    	$( wget -T30 -q -O- http://[::1]:2006/links | grep -e ^[1-9] )
EOM
						;;
			esac
		
			array link        
			while read my_ip n_ip hyst lq nlq etx 
			do
				if [ -n "$n_ip" -a "$etx" != "INFINITE" ]; then
					obj
						attr sourceAddr $my_ip
						attr destAddr $n_ip	
						attr metric $lq
					endobj
				fi
			done 
			endarr 
		endobj
	}


	obj neighbour
	  for config in /var/etc/olsrd.conf /var/etc/olsrd-ipv6.conf
  	do
    	[ -e $config ] && olsr_links $config
	  done
	endobj
}

rf_links(){
	[ "$DEBUG" = "1" ] &&	echo "entered rf_links()"

	rflinks_wifi_iface(){
		[ "$DEBUG" = "1" ] &&	echo "entered rflinks_wifi_iface()"

		local config=$1
		config_get device "$config" device
		
		if [ "$device" = "$2" ]
		then
			config_get ifname $config ifname
			macaddr=$( ip addr show dev $ifname | grep -e '.*:.*:.*:.*:.*:.*' | cut -d" " -f 6 )
			case $3 in
				atheros)	temp=$( wlanconfig $ifname list sta | grep -v ADDR | grep -i -v $macaddr | awk -v source=$macaddr '{print "obj; attr sMAC "source"; attr dMAC "$1"; attr rssi "$6"; endobj"}' )
									eval "$temp"
					;;
				mac80211)	temp=$(iw $ifname station dump | awk -v source=$macaddr '{
										if($1~/Station/) print "obj;attr sMAC "source";attr dMAC "$2";";
										if($1~/signal/) print "attr rssi "$2";";
										if($0~/tx bitrate/) print "attr txrate "$3";endobj;"}' )
									eval "$temp"
					;;
			esac
		fi
	}

	rflinks_wifi_device(){
		[ "$DEBUG" = "1" ] &&	echo "entered rflinks_wifi_device()"

		local config=$1
		config_get type "$config" type
		config_foreach rflinks_wifi_iface wifi-iface "$config" $type
	}
	
	array rfNeighbour
		config_load wireless
		config_foreach make_dev_list wifi-device
		for wd in $DEVICES
		do
			rflinks_wifi_device $wd
		done
	endarr
}

upload(){
	[ "$DEBUG" = "1" ] &&	echo "entered upload()"
  
	config_load freifunk_map
	config_get id ffmap id

	rem_trailing_comma
	#URL="$URL?do=testJson&"$DATA
	TXURL="$URL?do=update&node={\"id\":\"$id\","$BEGIN$DATA"}"

	[ "$DEBUG" = "1" ] && {
		length=${#TXURL}
		echo "\$TXURL is $length long"
		echo "update-string: $TXURL"
	}

	returnstring=$( wget -T30 -q -O- $TXURL )
	echo $returnstring
	DATA=""
	TXURL=""
}

getid(){
	macAddr=$( ip addr show dev eth0 | grep -e '.*:.*:.*:.*:.*:.*' | cut -d" " -f 6 )
	returnstring=$( wget -T30 -q -q -O- "$URL?do=getID&macAddr=$macAddr" )
	errorcode=$( echo $returnstring | cut -d"|" -f1 )
	errormessage=$( echo $returnstring | cut -d"|" -f2 )
	returndata=$( echo $returnstring | cut -d"|" -f3 )

	eval "$returndata"

	uci set freifunk_map.ffmap.id="$id"
	uci commit
}


update(){
	[ "$DEBUG" = "1" ] &&	echo "entered update() $1"
	
	case $1 in
		link)
			rp_links
			upload

			rf_links
			upload
			;;
		* )	
			config_load freifunk_map
			config_get nodeid ffmap id
			if [ "$nodeid" = "0" -o -z "$nodeid" ] 
			then
				echo "Error while getting ID. NodeID is 0 or empty. Retrieving a new one"
				getid
			fi
	
			config_get_batch ffmap nodeinterval linkinterval timeout
			attr updateIntervalNode $nodeinterval
			attr updateIntervalLink $linkinterval
			attr timeout $timeout
			attr hostname $( uname -n )
			config_load olsrd
			get_gps_coords(){
				local config=$1
				config_get lat $config lat 2>/dev/null
				config_get lon $config lon 2>/dev/null
				[ -n "$lat" ] && attr latitude $lat
				[ -n "$lon" ] && attr longitude $lon
			}
			config_foreach get_gps_coords LoadPlugin
	
			upload
		
			network_interfaces
			upload

			rp_links
			upload

			rf_links
			upload
			;;
esac
			
	
}


start(){
	if [ ! -e /etc/config/freifunk_map ]
	then
		[ "$DEBUG" = "1" ] &&	echo "kein config-file"
		cat <<EOF > /etc/config/freifunk_map
	
config 'node' 'ffmap'
	option	'id' '0'
	option	'nodeinterval' '1'
	option	'linkinterval' '0.1'
	option	'timeout' '5'

EOF

		getid
	fi
	
	config_load freifunk_map
	config_get_batch ffmap nodeinterval linkinterval
	minutes=$(date | cut -d":" -f2)
	
	for s in node link
	do
		eval "int=\$${s}interval"
		dez=$( echo $int | cut -d"." -f1 )
		fract=$( echo $int | cut -d"." -f2 )
	
		if [ -z "$( grep yaffmap /etc/crontabs/root | grep $s )" ]
		then
			if [ "$dez" = "0" ]
			then
				fract=${fract:0:1}
				minstep=$( expr 60 \* $fract / 10 )
				echo "*/$minstep * * * * /etc/init.d/yaffmap update $s" >> /etc/crontabs/root
			else
				echo "$minutes */$dez * * * /etc/init.d/yaffmap update $s" >> /etc/crontabs/root
			fi
		fi
	done
}

stop (){
	grep -v yaffmap /etc/crontabs/root > /tmp/yaffmap.tmp
	mv /tmp/yaffmap.tmp /etc/crontabs/root
}

case $1 in
	start|stop) $1
		;;
	update) update $2
		;;
	restart)	stop
						start
		;;
	*) echo "usage: $0 start|stop|update"
esac
	