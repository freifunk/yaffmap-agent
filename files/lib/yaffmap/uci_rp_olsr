#!/bin/sh

olsr_links(){
	[ "$DEBUG" = "1" ] && echo "entering olsr_links()"
	local config error=0

	olsr_links_common || ( error=1; ERROR_REASON="$ERROR_REASON olsr_links_common" )

	[ "$DEBUG" = "1" ] && echo "exiting olsr_links() $error"
	return $error
}

olsr_global_update(){
	[ "$DEBUG" = "1" ] && echo "entering olsr_global_update()"
	local error=0
	local suffix 
	local updateintervalglobal ipversion metrictype
	local latlonfile hostsfile

	updateintervalglobal=$( uci get freifunk_map.ffmap.globalinterval 2>/dev/null)
	version="uci"
	tree=$( cat /lib/yaffmap/release.txt | cut -d":" -f1 )
	release=$( cat /lib/yaffmap/release.txt | cut -d":" -f2 )
	
	[ "$FORCE" = "1" ] && [ -z "$updateintervalglobal" ] && updateintervalglobal=0

	get_dnssuffix(){
		[ -z "$suffix" ] && config_get suffix "$1" suffix
	}
	config_load olsrd
	config_foreach get_dnssuffix LoadPlugin
	
	if [ -z "$updateintervalglobal" ]
	then
		echo "No olsr global update without globalinterval"
		error=1
	else
		for ipversion in $IPVERSIONS
		do
			[ "$ipversion" = "6" ] && ip="[::1]" || ip="127.0.0.1"
			eval $( wget -q -O- http://$ip:2006/config | awk '{
					if ($0 ~ "LinkQualityAlgorithm"){print "metrictype="$2}
					if ($0 ~ "latlon-file"){print "latlonfile="$3}
					if ($0 ~ "hosts-file"){print "hostsfile="$3}
				}' )
			if ! olsr_global_update_common "$updateintervalglobal" "$suffix" "$metrictype" "$ipversion" "$latlonfile" "$hostsfile" "$tree" "$release" "$version"
			then 
				error=1
				ERROR_REASON="$ERROR_REASON olsr_global_update_common"
			fi
		done
	fi

	[ "$DEBUG" = "1" ] && echo "exiting olsr_global_update() "$error
	return $error
}