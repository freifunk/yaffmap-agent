#!/bin/sh

config_get_batch(){
	local s
	
	for s in $*
	do
		eval "config_get $s \"$1\" $s"
	done
}

make_dev_list(){
	DEVICES="$DEVICES $1"
}

migrate_from_old(){
	local linkinterval upgradeinterval server

	linkinterval=$(uci get freifunk_map.ffmap.linkinterval 2>/dev/null)
	
	if [ -n "$linkinterval" ]
	then
		uci set freifunk_map.ffmap.linksinterval=$linkinterval
		uci del freifunk_map.ffmap.linkinterval
		remove_from_cron
		add_to_cron
	fi

	upgradeinterval=$(uci get freifunk_map.ffmap.upgradeinterval 2>/dev/null)
	
	if [ -z "$upgradeinterval" ]
	then
		uci set freifunk_map.ffmap.upgradeinterval=0.1
		remove_from_cron
		add_to_cron
	fi
	
	server=$(uci get freifunk_map.ffmap.server 2>/dev/null)

	if [ -z "$server" ]
	then
		uci add_list freifunk_map.ffmap.server=http://yaffmap.gross-holger.de/index.php
		uci add_list freifunk_map.ffmap.server=http://wurststulle.dyndns.org/yaffmap/index.php
		uci add_list freifunk_map.ffmap.server=http://yaffmap.basicinside.de/index.php
	fi
	
	# add parameter -q to crontab entries
	grep yaffmap /etc/crontabs/root > /tmp/yaffmap_tmp
	if [ -s /tmp/yaffmap_tmp ]
	then
		cat /tmp/yaffmap_tmp | grep "\-q" > /tmp/yaffmap_tmp2
		if [ ! -s /tmp/yaffmap_tmp2 ]
		then
			remove_from_cron
			add_to_cron
		fi
	fi
	
	uci del freifunk_map.ffmap.upgradetree 2>/dev/null
}

upgrade(){
	local url=$1

	if [ -n "$url" ]
	then
		wget -T30 -q -O/tmp/yaffmap_redist.tar.gz $url
		error=$?
		
		if [ "$error" -eq 0 ]
		then
			#todo: check for successfull untaring
			[ "$DEBUG" = "1" ] && echo "Download of new release successfull. Unpacking"
			cat /etc/crontabs/root > /tmp/yaffmap_tmp
			[ -s /tmp/yaffmap_tmp ] && started="true"
			[ "$started" == "true" ] && remove_from_cron
			rm -rf /lib/yaffmap /etc/init.d/yaffmap
			tar -C / -xzf /tmp/yaffmap_redist.tar.gz
			[ "$started" == "true" ] && add_to_cron
		fi
	fi

	/etc/init.d/yaffmap migrate_from_old -q
}

create_config(){
	if [ ! -e /etc/config/freifunk_map ]
	then
		[ "$DEBUG" = "1" ] &&	echo "No config-file. Creating new one"
		cat <<EOF > /etc/config/freifunk_map
	
config 'node' 'ffmap'
	option	'id' '0'
	option	'nodeinterval' '1'
	option	'linksinterval' '0.1'
	option	'upgradeinterval' '12'
	option	'timeout' '5'
	list	'server' 'http://wurststulle.dyndns.org/ffmap/build/index.php'
	list  'server' 'http://yaffmap.basicinside.de/index.php'

EOF
	fi
}

add_to_cron(){
	local minutes nodeinterval linksinterval globalinterval upgradeinterval int s dez fract minstep debarg
	config_load freifunk_map
	config_get_batch ffmap nodeinterval linksinterval globalinterval upgradeinterval
	minutes=$(date | cut -d":" -f2)

	grep yaffmap /etc/crontabs/root > /tmp/yaffmap_tmp
	if [ ! -s /tmp/yaffmap_tmp ]
	then
		for s in node links global upgrade
		do
			eval "int=\$${s}interval"

			if [ -n "$int" ]
			then
				dez=$( echo $int | cut -d"." -f1 )
				fract=$( echo $int | cut -d"." -f2 )
		
				[ "$UPLOAD_DEBUG_INFO" = "1" -a "$s" = "global" ]	&& debarg="-du"
				if [ "$dez" = "0" ]
				then
					fract=${fract:0:1}
					minstep=$( expr 60 \* $fract / 10 )
					echo "*/$minstep * * * * /etc/init.d/yaffmap update $s -q $debarg" >> /etc/crontabs/root
				else
					echo "$minutes */$dez * * * /etc/init.d/yaffmap update $s -q $debarg" >> /etc/crontabs/root
				fi
				
				debarg=""
			fi
		done
		/etc/init.d/cron restart
	fi
}

remove_from_cron(){
	grep -v yaffmap /etc/crontabs/root > /tmp/yaffmap_crontab.tmp
	mv /tmp/yaffmap_crontab.tmp /etc/crontabs/root
	/etc/init.d/cron restart
}

saveid(){
	uci set freifunk_map.ffmap.id="$1"
	uci commit
}

load_node_data(){
	local found_working_url
	
	config_load freifunk_map
	config_get_batch ffmap nodeinterval linksinterval timeout id
	
	#get the first working server from url list
	check_working_url(){
		if [ "$found_working_url" != "1" ]
		then
			local l_url="$1"
			wget -T 30 -q -O/dev/null "$l_url"
			if [ $? -eq 0  ] 
			then
				URL="$l_url"
				found_working_url="1"
			fi
		fi
	}
	config_list_foreach ffmap server check_working_url
	
	config_load olsrd
	get_gps_coords(){
		local config=$1
		[ -z "$lat" ] && config_get lat $config lat 2>/dev/null
		[ -z "$lon" ] && config_get lon $config lon 2>/dev/null
		[ -z "$latlon_file" ] && config_get latlon_file $config latlon_file 2>/dev/null
	}
	config_foreach get_gps_coords LoadPlugin
	
	if [ -e "$latlon_file" ]
	then
		eval $(grep Self $latlon_file | sed "s/'//g" | awk '{FS=",";print "isHna="$4";defGateway="$5";"}')
	fi
	
	upgradetree=$( cat /lib/yaffmap/release.txt | cut -d":" -f1 )
	agentRelease=$( cat /lib/yaffmap/release.txt | cut -d":" -f2 )
	agentVersion="uci"
}


wifi_default_config(){
	cat <<EOF >> /etc/config/freifunk_map

config rf-iface $config
	option	'antDirection'	'0'
	option	'antGain'	'2'
	option	'antBeamH'	'360'
	option	'antBeamV'	'90'
	option	'antPol'	'V'
	option	'antTilt'	'0'
	option	'ignore'	'0'

EOF
}

wired_default_config(){
	local config=$1 ignore=0
	[ "$config" = "loopback" ] && ignore=1

	cat <<EOF >> /etc/config/freifunk_map

config wired-iface $config
	option	'ignore'	'$ignore'

EOF
}

interface_addresses(){
	[ "$DEBUG" = "1" ] &&	echo "entered interface_addresses() $1"

	local ipaddr ip6addr ifname type aliasesmacaddr macaddr config a

	ip_params(){		
		local config=$1
		config_get_batch "$config" ipaddr ip6addr
		[ -n "$ipaddr" ] && attr ipv4Addr $ipaddr
		[ -n "$ip6addr" ] && attr ipv6Addr $ip6Addr
	}

	local config=$1
	config_get_batch "$config" ifname type aliases
	
	if [ -n "$ifname" ]
	then
		macaddr=$( ifconfig $ifname | grep HWaddr | cut -d" " -f11 )
		attr macAddr $macaddr
		ip_params $config
		[ "$type" = "bridge" ] && attr bridgeName "$ifname"

		if [ -n "$aliases" ]
		then
			array ipAlias
				for a in $aliases
				do
					obj
						config_get ifname "$a" ifname
						attr name $ifname
						ip_params $a
					endobj
				done
			endarr
		fi
	fi
}


wifi_device_attributes(){
	[ "$DEBUG" = "1" ] &&	echo "entered wifi_device_attributes() $1"

	
	wifi_iface_attributes(){
		[ "$DEBUG" = "1" ] &&echo "entered wifi_iface_attributes() $1"
		local config="$1" device ssid bssid mode ifname wlmac network type
	
		config_get device "$config" device
		if [ "$device" = "$2" ]
		then
			config_get_batch "$config" ssid bssid mode ifname network
			if [ -n "$ifname" ]
			then
				obj
				[ -n "$ssid" ] && attr essid "$ssid"
				[ -n "$bssid" ] && attr bssid $bssid
				[ -n "$mode" ] && attr wlMode $mode
				attr name $ifname
				wlmac=$( ifconfig $ifname | grep HWaddr | cut -d" " -f11 )
				attr wlMacAddr $wlmac
				interface_addresses $network
				config_get type "$network" type
				[ "$type" != "bridge" ] && WIRELESS_NETWORKS="$WIRELESS_NETWORKS $network"
				endobj		
			fi
		fi
	} 

	local config="$1" error=0 ignore type channel hwmode txpower macaddr antDirection antGain antBeamH antBeamV antPol antTilt macaddr var_cont s
	
	[ -z "$(uci get freifunk_map.$config.ignore 2>/dev/null )" ] && wifi_default_config	$config
	
	ignore=$(uci get freifunk_map.$config.ignore)
	
	if [ "$ignore" != "1" ]
	then
		config_get_batch "$config" type channel hwmode txpower macaddr antDirection antGain antBeamH antBeamV antPol antTilt macaddr
		obj
			attr name $config
			
			for s in antDirection antGain antBeamH antBeamV antPol antTilt channel txpower
			do
				eval "var_cont=\$$s"
				[ -n "$var_cont" ] && attr $s $var_cont
			done
			[ -n "$hwmode" ] && attr wirelessStandard "802.$hwmode"
			
			array wlIface
				config_foreach wifi_iface_attributes wifi-iface $config
			endarr
		endobj
		upload_split_check
	fi
	
	[ "$UPLOADSPLITCHECKERROR" -eq 1 ] && { 
		error=1 
		ERROR_REASON="$ERROR_REASON wifi_device_attributes" 
	}
	return $error
}

network_interfaces(){
	[ "$DEBUG" = "1" ] &&	echo "entered network_interfaces()"
	
	network_iface(){
		[ "$DEBUG" = "1" ] &&	echo "entered network_iface() $1"
		local config=$1
		local isbridge=0
		local iswireless=0
		local ignore ifname
		
		for net in $WIRELESS_NETWORKS
		do
			[ "$net" = "$config" ] && iswireless=1
		done
		
		if [ "$iswireless" != "1" ]
		then
			[ -z "$(uci get freifunk_map.$config.ignore 2>/dev/null )" ] && wired_default_config $config
	
			ignore=$(uci get freifunk_map.$config.ignore)
		
			if [ "$ignore" != "1" ]
			then
				obj
					config_get ifname "$config" ifname
					attr name $ifname
					interface_addresses $config
				endobj
				upload_split_check
			fi
		fi
	}
	
	local error=0

	config_load network
	scan_interfaces

	uploadprefixglobal=$UPLOADPREFIX
	uploadsuffixglobal=$UPLOADSUFFIX

	SECTIONSUFFIX=""
	endarr -v SECTIONSUFFIX

	array -v SECTIONPREFIX wlDevice
		config_load wireless
		config_foreach make_dev_list wifi-device
		for wd in $DEVICES
		do
			wifi_device_attributes $wd
		done
	upload_split_check $DATA
	error=$?

	SECTIONPREFIX=""
	array -v SECTIONPREFIX wiredIface
		config_load network
		DEVICES=""
		config_foreach make_dev_list interface
		for int in $DEVICES
		do
			network_iface $int
		done
	
	upload_split_check $DATA
	[ "$error" -eq 0 ] && error=$?
	
	SECTIONPREFIX=""
	SECTIONSUFFIX=""

	[ "$UPLOADSPLITCHECKERROR" -eq 1 ] && error=1
	[ "$error" -eq 1 ] &&	ERROR_REASON="$ERROR_REASON network_interfaces"
	[ "$DEBUG" = "1" ] && echo "exiting network_interfaces() $error"
	return $error
}

rf_links(){
	[ "$DEBUG" = "1" ] &&	echo "entered rf_links()"

	rflinks_wifi_iface(){
		[ "$DEBUG" = "1" ] &&	echo "entered rflinks_wifi_iface() $1"

		local config="$1" error=0 device ifname macaddr temp 
		config_get device "$config" device
		
		if [ "$device" = "$2" ]
		then
			config_get ifname $config ifname
			if [ -n "$ifname" ]
			then
				macaddr=$( ifconfig $ifname | grep HWaddr | cut -d" " -f11 )
				case $3 in
					atheros)	
						temp=$( wlanconfig $ifname list sta | grep -v ADDR | grep -i -v $macaddr | awk -v source=$macaddr '{print "obj; attr sMac "source"; attr dMac "$1"; attr rssi "$6"; endobj;upload_split_check"}' ) 
						eval "$temp"
						;;
					mac80211)	
						temp=$( iw $ifname station dump | awk -v source=$macaddr '{
							if($1~/Station/) print "obj;attr sMac "source";attr dMac "$2";";
							if($1~/signal/) print "attr rssi "$2";";
							if($0~/tx bitrate/) print "attr txRate "$3";endobj;upload_split_check;"}' )
						eval "$temp"
						;;
				esac
			fi
		fi
		
		[ "$UPLOADSPLITCHECKERROR" -eq 1 ] && ERROR_REASON="$ERROR_REASON rflinks_wifi_iface($ifname)"
		return $UPLOADSPLITCHECKERROR
	}

	rflinks_wifi_device(){
		[ "$DEBUG" = "1" ] &&	echo "entered rflinks_wifi_device() $1"
		local error=0

		local config=$1 type
		config_get type "$config" type
		config_foreach rflinks_wifi_iface wifi-iface "$config" $type
		
		error=$?
	}
	
	local error=0 uploadprefixglobal uploadsuffixglobal
	
	array -v SECTIONPREFIX rfNeighbour
	endarr -v SECTIONSUFFIX
	
	DEVICES=""
	config_load wireless
	config_foreach make_dev_list wifi-device
	for wd in $DEVICES
	do
		rflinks_wifi_device $wd
	done

	error=$?

	SECTIONPREFIX=""
	SECTIONSUFFIX=""

	[ "$UPLOADSPLITCHECKERROR" -eq 1 ]	&& error=1
	[ "$error" -eq 1 ] && ERROR_REASON="$ERROR_REASON rf_links"
	[ "$DEBUG" = "1" ] && echo "exiting rf_links() $error"
	return $error
}

