#!/bin/sh

#
# functions in this file called by init-script:
# network_interfaces (uploads wired and wireless interfaces config by itself)
# rf_links (uploads wireless intefaces config by itself)
# create_config (creates the initial in config memory)
# migrate_from_old
# add_to_cron (creates cron_entries)
# remove_from_cron
# saveid (saves the nodeid)
# load_node_data 
#

#######
# create_config
# gets: -
# sets: -
# returns: -
# create default config
# writes it to config memory
create_config(){
	echo "create_config()"
}

#######
# add_to_cron
# gets: -
# sets: -
# returns: -
# adds the appropriate lines in the crontab for node- and linksupdates
add_to_cron(){
	echo "add_to_cron()"
}

#######
# saveid
# gets: 1 - nodeID
# sets: -
# returns: -
# saves the nodeID to config during getID
saveid(){
	echo "saveid()"
}

#######
# load_node_data
# gets: -
# sets: nodeinterval linksinterval timeout id lat lon
# returns: -

# loads the node attribures from config and puts then in the corresponding global variables
load_node_data(){
	echo "load_node_data()"
}

#######
# network_interfaces
# gets: -
# sets: -
# returns: success of the embedded 'uploads' and 'upload_split_check' calls
# uses global vars: UPLOADPREFIX UPLOADSUFFIX (UPLOADSPLITCHECKERROR)
# -collects wired and wireless interface data to create and fill up wlDevice and wiredIface arrays
# -upload them
# -possibly fill up config with interface default parameter (eg for antenna) is not existing
# (refer to upload and json_helper)
network_interfaces(){
	[ "$DEBUG" = "1" ] &&	echo "entered network_interfaces()"

	#collect data, use upload_split_check wherever data can be splitted

	upload

	error=$?
	[ "$DEBUG" = "1" ] && echo "exiting network_interfaces() $error"
	return $error

}

#######
# rf_links
# gets: -
# sets: ERROR_REASON (appends to it)
# returns: success of the embedded 'uploads' calls and 'upload_split_check' calls
# uses global vars: UPLOADPREFIX UPLOADSUFFIX (UPLOADSPLITCHECKERROR)
# -collects signal strength and transmit rate choosen by rate control algorithm on a per-neighbour basis to fill up rfNeighbour array
# -upload them
rf_links(){
	[ "$DEBUG" = "1" ] &&	echo "entered rf_links()"

	uploadprefixglobal=$UPLOADPREFIX
	array -v UPLOADPREFIX rfNeighbour
	uploadsuffixglobal=$UPLOADSUFFIX
	UPLOADSUFFIX=""
	endarr -v UPLOADSUFFIX
	rem_trailing_comma -v UPLOADSUFFIX
	UPLOADSUFFIX="$UPLOADSUFFIX$uploadsuffixglobal"


	#collect data, use upload_split_check	wherever data can be splitted

	upload
	error=$?
	
	UPLOADPREFIX=$uploadprefixglobal
	UPLOADSUFFIX=$uploadsuffixglobal

	[ "$DEBUG" = "1" ] && echo "exiting rf_links() $error"
	return $error
}

