#!/bin/sh
. /etc/functions.sh
include /lib/network/

# script revision: $Revision$

URL="http://wurststulle.dyndns.org/ffmap/build/index.php"

#######
# do not alter variables from here on unless you know what you are doing
UPLOAD_SUCCESSFUL=1
PRETEND_UPLOAD=0
DEBUG=0
QUIET=0
TEMP_DIR=/tmp

for file in $( ls /lib/yaffmap/* )
do
	. $file
done


upload(){
	[ "$DEBUG" = "1" ] &&	echo "entered upload()"
	
	local error=0 returnstring errorcode errormessage error=0 txurl
  
	rem_trailing_comma
	if [ -n "$1" ]
	then
		txurl="$1"
	else
		txurl="$URL$UPLOADPREFIX$DATA$UPLOADSUFFIX"
	fi

	if [ "$PRETEND_UPLOAD" = "1" ]
	then
		echo "This would have been transmitted without '-p':"
		echo "$txurl"
	else
		returnstring="$( wget -T30 -q -O- $txurl )"
		error=$?

		errorcode=$( echo $returnstring | cut -d"|" -f1 )
		errormessage=$( echo $returnstring | cut -d"|" -f2 )
		SERVER_RESPONSE=$( echo $returnstring | cut -d"|" -f3 )

		if [ "$DEBUG" = "1" ]
		then
			length=${#txurl}
			echo "\$TXURL is $length long"
			echo "upload-string: $txurl"
			echo "error text: $errormessage"
			echo "update returnstring: $SERVER_RESPONSE"
		fi

		if [ ! "$errorcode" = "0" ] 
		then
			echo "Map Server returned error"
			echo 
			echo "Error Code: $errorcode"
			echo 
			echo "Error Text: $errormessage"
			echo 
			echo "Transmit String: $txurl"
			echo
			error=1
		fi
	fi


	DATA=""
	
	[ "$DEBUG" = "1" ] && echo "exiting upload() $error"
	return $error
}

upload_split_check(){
#	[ "$DEBUG" = "1" ] && echo "entering upload_split_check()"
	local error=0
	
	length=${#DATA}
	if [ $length -gt 1500 ]
	then
		upload
		error=$?
		DATA=""
	fi
	
	if [ "$UPLOADSPLITCHECKERROR" -eq 1 ] 
	then
		error=1
	fi
	UPLOADSPLITCHECKERROR=$error
	
#	[ "$DEBUG" = "1" ] && echo "exiting upload_split_check() $error"
	return $error
}

rp_links(){
	local error=0
	
	obj neighbour
		for rp in $ROUTINGPROTOCOLS
		do
			if ! ${rp}_links; then error=1; fi
		done
	endobj

	upload
	[ $error -eq 0 ] && error=$?

	[ "$DEBUG" = "1" ] && echo "exiting rp_links() $error"	
	return $error
}


getid(){
	local error=0
	eval $( ip addr | awk '
	{
		if($0~/ether/){
			ether=$2 }
		if($0~/inet /){
		  split($2,tmp,"/")
		  ip=tmp[1]
		  if(ether){
				print "macaddr="ether";ip="ip
				exit
			}
		}
	}' )

	[ "$GETIDIP" = "1" ] && ip_addon="&ipv4Addr=$ip"
	
	if upload "$URL?do=getID&macAddr=$macaddr$ip_addon"
	then
		eval "$SERVER_RESPONSE"
		saveid "$id"
	else
		error=1
	fi
	
	[ "$DEBUG" = "1" ] && echo "exiting getid() $error"
	return $error
}


update(){
	[ "$DEBUG" = "1" ] &&	echo "entered update() $1"
	
	local update_mode="$1" error=0

	load_node_data
	if [ "$id" = "0" -o -z "$id" ] 
	then
		[ "$QUIET" = "0" ] && echo "NodeID is 0 or empty. Retrieving a new one"
		getid
		update_mode="full"
	fi

	UPLOADPREFIX="?do=update&node="
	obj -v UPLOADPREFIX
		attr -v UPLOADPREFIX id $id
	
	endobj -v UPLOADSUFFIX
	rem_trailing_comma -v UPLOADSUFFIX
	
	case $update_mode in
		links)
			if ! rp_links; then error=1; ERROR_REASON="$ERROR_REASON rp_links"; fi
			if ! rf_links; then error=1; ERROR_REASON="$ERROR_REASON rf_links"; fi
			;;
		global)	
			if ! olsr_global_update ; then error=1; ERROR_REASON="$ERROR_REASON global_map_update"; fi
			;;
		* )	
			load_node_data	
			attr updateIntervalNode $nodeinterval
			attr updateIntervalLink $linksinterval
			attr timeout $timeout
			attr hostname $( uname -n )
			[ -n "$lat" ] && attr latitude $lat
			[ -n "$lon" ] && attr longitude $lon
			if ! upload; then error=1; ERROR_REASON="$ERROR_REASON node_data"; fi
		
			if ! network_interfaces; then error=1; ERROR_REASON="$ERROR_REASON interface_data"; fi
			if ! rp_links; then error=1; ERROR_REASON="$ERROR_REASON rplink_data"; fi
			if ! rf_links; then error=1; ERROR_REASON="$ERROR_REASON rflink_data"; fi
			;;
	esac

	[ "$DEBUG" = "1" ] && echo "exiting update() $error"
	return $error
}

local error=0 usage=0 noerrmsg=0
args=$@

for s in $@
do
	case $s in
		"-q") 
			QUIET=1
			;;
		"-v")	
			DEBUG=1
			;;
		"--getidip")
			GETIDIP=1
			;;
		"-p")
			PRETEND_UPLOAD=1
			;;
	esac
	args=$( echo $args | sed 's/$s//g' )	
done

case $( echo $args | cut -d" " -f1 ) in
	start)
		if ! create_config; then error=1; fi
		migrate_from_old
		if ! add_to_cron; then error=1; fi
		noerrmsg=1
		;;
	stop)
		remove_from_cron
		noerrmsg=1
		;;
	update) 
		update $2
		error=$?
		;;
	restart)	
		$0 stop
		[ $? -eq 1 ] && error=1
		$0 start
		[ $? -eq 1 ] && error=1
		;;
	*)	
			echo "usage: $0 [options] start|stop|(update [links|global])"
			echo "	options:"
			echo "	-v		show debug output"
			echo "	-q		do not show show success or error messages"
			echo "	-p		data is printed on screen instead of being uploaded"
			echo "	--getidip	use also IP address to retrieve nodeID from map server"
			noerrmsg=1
		;;
esac


if [ $noerrmsg -eq 0 ]
then
	if [ $error -eq 0 ]
	then
		echo "Update Successful"
	else
		echo "Error during update. ERROR_REASON=$ERROR_REASON"
		echo "Please start with argument -v and mail the output to the developers"
	fi
fi